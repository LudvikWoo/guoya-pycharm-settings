<templateSet group="guoya_init">
  <template name="guoya_init_tools" value="# -*- coding:utf-8 -*-&#10;# Author : 小吴老师&#10;# Data ：2019/7/18 20:27&#10;import os&#10;import shutil&#10;import stat&#10;import subprocess&#10;import yaml&#10;import time&#10;import requests&#10;&#10;&#10;def _get_yaml(yaml_path):&#10;    with open(yaml_path, 'r', encoding='utf-8') as f:&#10;        content = yaml.load(f.read(), Loader=yaml.FullLoader)&#10;    return content&#10;&#10;&#10;def _invoke(cmd):&#10;    try:&#10;        output, errors = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE).communicate()&#10;        o = output.decode(&quot;utf-8&quot;)&#10;        print(o)&#10;        return o&#10;    except Exception as e:&#10;        print('执行命令失败，请检查环境配置')&#10;        print(e)&#10;        raise&#10;&#10;&#10;def _copy_file(src_file, target_dir):&#10;    shutil.copy(src_file, target_dir)&#10;&#10;&#10;def _copy_dir_simple(src_dir, target_dir):&#10;    if not os.path.exists(target_dir):&#10;        shutil.copytree(src_dir, target_dir)&#10;&#10;&#10;&quot;&quot;&quot;&#10;利用递归实现目录的遍历&#10;@para sourcePath:原文件目录&#10;@para targetPath:目标文件目录&#10;&quot;&quot;&quot;&#10;def _copy_dir(sourcePath, targetPath):&#10;    if not os.path.exists(sourcePath):&#10;        return&#10;    if not os.path.exists(targetPath):&#10;        os.makedirs(targetPath)&#10;&#10;    # 遍历文件夹&#10;    for fileName in os.listdir(sourcePath):&#10;        # 拼接原文件或者文件夹的绝对路径&#10;        absourcePath = os.path.join(sourcePath, fileName)&#10;        # 拼接目标文件或者文件加的绝对路径&#10;        abstargetPath = os.path.join(targetPath, fileName)&#10;        # 判断原文件的绝对路径是目录还是文件&#10;        if os.path.isdir(absourcePath):&#10;            # 是目录就创建相应的目标目录&#10;            if not os.path.exists(absourcePath):&#10;                os.makedirs(abstargetPath)&#10;            # 递归调用getDirAndCopyFile()函数&#10;            _copy_dir(absourcePath, abstargetPath)&#10;        # 是文件就进行复制&#10;        if os.path.isfile(absourcePath) and not os.path.exists(abstargetPath):&#10;            rbf = open(absourcePath, &quot;rb&quot;)&#10;            wbf = open(abstargetPath, &quot;wb&quot;)&#10;            while True:&#10;                content = rbf.readline(1024 * 1024)&#10;                if len(content) == 0:&#10;                    break&#10;                wbf.write(content)&#10;                wbf.flush()&#10;            rbf.close()&#10;            wbf.close()&#10;&#10;&#10;def _get_root_path():&#10;    root_path = os.path.abspath(os.path.dirname(__file__)).replace('\\', '/')&#10;    print(root_path)&#10;    # if root_path.find('venv') &gt; 0:&#10;    #     root_path = root_path[:root_path.find('venv') - 1]&#10;    return root_path + '/'&#10;&#10;&#10;def _mkdir(path):&#10;    is_exists = os.path.exists(path)&#10;    if not is_exists:&#10;        os.makedirs(path)&#10;&#10;&#10;def _deldir(dir):&#10;    if os.path.exists(dir):&#10;        for file in os.listdir(dir):&#10;            file = os.path.join(dir, file)&#10;            if os.path.isdir(file):&#10;                print(&quot;remove dir&quot;, file)&#10;                os.chmod(file, stat.S_IWRITE | stat.S_IWOTH)&#10;                _deldir(file)&#10;            elif os.path.isfile(file):&#10;                print(&quot;remove file&quot;, file)&#10;                os.chmod(file, stat.S_IWRITE | stat.S_IWOTH)&#10;                os.remove(file)&#10;        shutil.rmtree(dir, True)&#10;&#10;&#10;def _copy_file(src_file, target_dir):&#10;    shutil.copy(src_file, target_dir)&#10;&#10;&#10;def _down_big_file(srcUrl, localFile):&#10;    print('%s\n ---&gt;&gt;&gt;\n  %s' % (srcUrl, localFile))&#10;    startTime = time.time()&#10;    with requests.get(srcUrl, stream=True) as r:&#10;        contentLength = int(r.headers['content-length'])&#10;        line = 'content-length: %dB/ %.2fKB/ %.2fMB'&#10;        line = line % (contentLength, contentLength / 1024, contentLength / 1024 / 1024)&#10;        print(line)&#10;        print('正在下载中..............')&#10;        downSize = 0&#10;        with open(localFile, 'wb') as f:&#10;            for chunk in r.iter_content(8192):&#10;                if chunk:&#10;                    f.write(chunk)&#10;                downSize += len(chunk)&#10;                line = '%d KB/s - %.2f MB， 共 %.2f MB'&#10;                line = line % (&#10;                    downSize / 1024 / (time.time() - startTime), downSize / 1024 / 1024, contentLength / 1024 / 1024)&#10;                print(line, end='\r')&#10;                if downSize &gt;= contentLength:&#10;                    break&#10;        timeCost = time.time() - startTime&#10;        line = '共耗时: %.2f s, 平均速度: %.2f KB/s'&#10;        line = line % (timeCost, downSize / 1024 / timeCost)&#10;        print(line)&#10;&#10;&#10;def _init(prj_name):&#10;    print('---------开始初始化-------------')&#10;    root_path = _get_root_path()&#10;    print('获取工程根目录：%s' % root_path)&#10;&#10;    prj_dir = root_path+'/.temp/' + prj_name&#10;    print('删除并重建临时文件夹: %s ' % prj_dir)&#10;    _deldir(prj_dir)&#10;    _mkdir(prj_dir)&#10;&#10;    cmd = 'git clone https://gitee.com/guoyasoft_wuling/' + prj_name + '.git ' + prj_dir&#10;    print(cmd)&#10;    print('框架下载中，请耐心等候......... ')&#10;    _invoke(cmd)&#10;&#10;    ## 读取ui初始化配置文件&#10;    y = _get_yaml(prj_dir + '/init_project.yaml')&#10;    ## 复制文件夹&#10;    dirs = y['dirs']&#10;    for dir in dirs:&#10;        _copy_dir(prj_dir + '/' + dir, root_path + dir)&#10;    ## 复制文件&#10;    files = y['files']&#10;    for file in files:&#10;        _copy_file(prj_dir + '/' + file, root_path)&#10;&#10;    _deldir(root_path+'/.temp/')&#10;&#10;def init_tools_prj():&#10;    _init('guoya-tools-test')&#10;&#10;&#10;def init_api_prj():&#10;    _init('guoya-api-test')&#10;&#10;&#10;def init_ui_prj():&#10;    # url = 'http://chromedriver.storage.googleapis.com/75.0.3770.90/chromedriver_win32.zip'&#10;    # _mkdir(root_path + 'chrome_driver')&#10;    # _down_big_file(url,root_path+'chrome_driver/chromedriver.exe')&#10;    _init('guoya-ui-test')&#10;&#10;&#10;def init_app_prj():&#10;    _init('guoya-app-test')&#10;&#10;def init_tools_demo():&#10;    _init('guoya-tools-demo')&#10;&#10;def init_api_demo():&#10;    _init('guoya-api-demo')&#10;&#10;def init_ui_demo():&#10;    _init('guoya-ui-demo')&#10;&#10;def init_app_demo():&#10;    _init('guoya-app-demo')&#10;&#10;&#10;if __name__=='__main__':&#10;    _init('guoya-tools-test')" description="搭建python基础框架" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="guoya_init_api" value="# -*- coding:utf-8 -*-&#10;# Author : 小吴老师&#10;# Data ：2019/7/18 20:27&#10;import os&#10;import shutil&#10;import stat&#10;import subprocess&#10;import yaml&#10;import time&#10;import requests&#10;&#10;&#10;def _get_yaml(yaml_path):&#10;    with open(yaml_path, 'r', encoding='utf-8') as f:&#10;        content = yaml.load(f.read(), Loader=yaml.FullLoader)&#10;    return content&#10;&#10;&#10;def _invoke(cmd):&#10;    try:&#10;        output, errors = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE).communicate()&#10;        o = output.decode(&quot;utf-8&quot;)&#10;        print(o)&#10;        return o&#10;    except Exception as e:&#10;        print('执行命令失败，请检查环境配置')&#10;        print(e)&#10;        raise&#10;&#10;&#10;def _copy_file(src_file, target_dir):&#10;    shutil.copy(src_file, target_dir)&#10;&#10;&#10;def _copy_dir_simple(src_dir, target_dir):&#10;    if not os.path.exists(target_dir):&#10;        shutil.copytree(src_dir, target_dir)&#10;&#10;&#10;&quot;&quot;&quot;&#10;利用递归实现目录的遍历&#10;@para sourcePath:原文件目录&#10;@para targetPath:目标文件目录&#10;&quot;&quot;&quot;&#10;def _copy_dir(sourcePath, targetPath):&#10;    if not os.path.exists(sourcePath):&#10;        return&#10;    if not os.path.exists(targetPath):&#10;        os.makedirs(targetPath)&#10;&#10;    # 遍历文件夹&#10;    for fileName in os.listdir(sourcePath):&#10;        # 拼接原文件或者文件夹的绝对路径&#10;        absourcePath = os.path.join(sourcePath, fileName)&#10;        # 拼接目标文件或者文件加的绝对路径&#10;        abstargetPath = os.path.join(targetPath, fileName)&#10;        # 判断原文件的绝对路径是目录还是文件&#10;        if os.path.isdir(absourcePath):&#10;            # 是目录就创建相应的目标目录&#10;            if not os.path.exists(absourcePath):&#10;                os.makedirs(abstargetPath)&#10;            # 递归调用getDirAndCopyFile()函数&#10;            _copy_dir(absourcePath, abstargetPath)&#10;        # 是文件就进行复制&#10;        if os.path.isfile(absourcePath) and not os.path.exists(abstargetPath):&#10;            rbf = open(absourcePath, &quot;rb&quot;)&#10;            wbf = open(abstargetPath, &quot;wb&quot;)&#10;            while True:&#10;                content = rbf.readline(1024 * 1024)&#10;                if len(content) == 0:&#10;                    break&#10;                wbf.write(content)&#10;                wbf.flush()&#10;            rbf.close()&#10;            wbf.close()&#10;&#10;&#10;def _get_root_path():&#10;    root_path = os.path.abspath(os.path.dirname(__file__)).replace('\\', '/')&#10;    print(root_path)&#10;    # if root_path.find('venv') &gt; 0:&#10;    #     root_path = root_path[:root_path.find('venv') - 1]&#10;    return root_path + '/'&#10;&#10;&#10;def _mkdir(path):&#10;    is_exists = os.path.exists(path)&#10;    if not is_exists:&#10;        os.makedirs(path)&#10;&#10;&#10;def _deldir(dir):&#10;    if os.path.exists(dir):&#10;        for file in os.listdir(dir):&#10;            file = os.path.join(dir, file)&#10;            if os.path.isdir(file):&#10;                print(&quot;remove dir&quot;, file)&#10;                os.chmod(file, stat.S_IWRITE | stat.S_IWOTH)&#10;                _deldir(file)&#10;            elif os.path.isfile(file):&#10;                print(&quot;remove file&quot;, file)&#10;                os.chmod(file, stat.S_IWRITE | stat.S_IWOTH)&#10;                os.remove(file)&#10;        shutil.rmtree(dir, True)&#10;&#10;&#10;def _copy_file(src_file, target_dir):&#10;    shutil.copy(src_file, target_dir)&#10;&#10;&#10;def _down_big_file(srcUrl, localFile):&#10;    print('%s\n ---&gt;&gt;&gt;\n  %s' % (srcUrl, localFile))&#10;    startTime = time.time()&#10;    with requests.get(srcUrl, stream=True) as r:&#10;        contentLength = int(r.headers['content-length'])&#10;        line = 'content-length: %dB/ %.2fKB/ %.2fMB'&#10;        line = line % (contentLength, contentLength / 1024, contentLength / 1024 / 1024)&#10;        print(line)&#10;        print('正在下载中..............')&#10;        downSize = 0&#10;        with open(localFile, 'wb') as f:&#10;            for chunk in r.iter_content(8192):&#10;                if chunk:&#10;                    f.write(chunk)&#10;                downSize += len(chunk)&#10;                line = '%d KB/s - %.2f MB， 共 %.2f MB'&#10;                line = line % (&#10;                    downSize / 1024 / (time.time() - startTime), downSize / 1024 / 1024, contentLength / 1024 / 1024)&#10;                print(line, end='\r')&#10;                if downSize &gt;= contentLength:&#10;                    break&#10;        timeCost = time.time() - startTime&#10;        line = '共耗时: %.2f s, 平均速度: %.2f KB/s'&#10;        line = line % (timeCost, downSize / 1024 / timeCost)&#10;        print(line)&#10;&#10;&#10;def _init(prj_name):&#10;    print('---------开始初始化-------------')&#10;    root_path = _get_root_path()&#10;    print('获取工程根目录：%s' % root_path)&#10;&#10;    prj_dir = root_path+'/.temp/' + prj_name&#10;    print('删除并重建临时文件夹: %s ' % prj_dir)&#10;    _deldir(prj_dir)&#10;    _mkdir(prj_dir)&#10;&#10;    cmd = 'git clone https://gitee.com/guoyasoft_wuling/' + prj_name + '.git ' + prj_dir&#10;    print(cmd)&#10;    print('框架下载中，请耐心等候......... ')&#10;    _invoke(cmd)&#10;&#10;    ## 读取ui初始化配置文件&#10;    y = _get_yaml(prj_dir + '/init_project.yaml')&#10;    ## 复制文件夹&#10;    dirs = y['dirs']&#10;    for dir in dirs:&#10;        _copy_dir(prj_dir + '/' + dir, root_path + dir)&#10;    ## 复制文件&#10;    files = y['files']&#10;    for file in files:&#10;        _copy_file(prj_dir + '/' + file, root_path)&#10;&#10;    _deldir(root_path+'/.temp/')&#10;&#10;def init_tools_prj():&#10;    _init('guoya-tools-test')&#10;&#10;&#10;def init_api_prj():&#10;    _init('guoya-api-test')&#10;&#10;&#10;def init_ui_prj():&#10;    # url = 'http://chromedriver.storage.googleapis.com/75.0.3770.90/chromedriver_win32.zip'&#10;    # _mkdir(root_path + 'chrome_driver')&#10;    # _down_big_file(url,root_path+'chrome_driver/chromedriver.exe')&#10;    _init('guoya-ui-test')&#10;&#10;&#10;def init_app_prj():&#10;    _init('guoya-app-test')&#10;&#10;def init_tools_demo():&#10;    _init('guoya-tools-demo')&#10;&#10;def init_api_demo():&#10;    _init('guoya-api-demo')&#10;&#10;def init_ui_demo():&#10;    _init('guoya-ui-demo')&#10;&#10;def init_app_demo():&#10;    _init('guoya-app-demo')&#10;&#10;&#10;if __name__=='__main__':&#10;    _init('guoya-api-test')" description="搭建接口自动化框架" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="guoya_init_ui" value="# -*- coding:utf-8 -*-&#10;# Author : 小吴老师&#10;# Data ：2019/7/18 20:27&#10;import os&#10;import shutil&#10;import stat&#10;import subprocess&#10;import yaml&#10;import time&#10;import requests&#10;&#10;&#10;def _get_yaml(yaml_path):&#10;    with open(yaml_path, 'r', encoding='utf-8') as f:&#10;        content = yaml.load(f.read(), Loader=yaml.FullLoader)&#10;    return content&#10;&#10;&#10;def _invoke(cmd):&#10;    try:&#10;        output, errors = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE).communicate()&#10;        o = output.decode(&quot;utf-8&quot;)&#10;        print(o)&#10;        return o&#10;    except Exception as e:&#10;        print('执行命令失败，请检查环境配置')&#10;        print(e)&#10;        raise&#10;&#10;&#10;def _copy_file(src_file, target_dir):&#10;    shutil.copy(src_file, target_dir)&#10;&#10;&#10;def _copy_dir_simple(src_dir, target_dir):&#10;    if not os.path.exists(target_dir):&#10;        shutil.copytree(src_dir, target_dir)&#10;&#10;&#10;&quot;&quot;&quot;&#10;利用递归实现目录的遍历&#10;@para sourcePath:原文件目录&#10;@para targetPath:目标文件目录&#10;&quot;&quot;&quot;&#10;def _copy_dir(sourcePath, targetPath):&#10;    if not os.path.exists(sourcePath):&#10;        return&#10;    if not os.path.exists(targetPath):&#10;        os.makedirs(targetPath)&#10;&#10;    # 遍历文件夹&#10;    for fileName in os.listdir(sourcePath):&#10;        # 拼接原文件或者文件夹的绝对路径&#10;        absourcePath = os.path.join(sourcePath, fileName)&#10;        # 拼接目标文件或者文件加的绝对路径&#10;        abstargetPath = os.path.join(targetPath, fileName)&#10;        # 判断原文件的绝对路径是目录还是文件&#10;        if os.path.isdir(absourcePath):&#10;            # 是目录就创建相应的目标目录&#10;            if not os.path.exists(absourcePath):&#10;                os.makedirs(abstargetPath)&#10;            # 递归调用getDirAndCopyFile()函数&#10;            _copy_dir(absourcePath, abstargetPath)&#10;        # 是文件就进行复制&#10;        if os.path.isfile(absourcePath) and not os.path.exists(abstargetPath):&#10;            rbf = open(absourcePath, &quot;rb&quot;)&#10;            wbf = open(abstargetPath, &quot;wb&quot;)&#10;            while True:&#10;                content = rbf.readline(1024 * 1024)&#10;                if len(content) == 0:&#10;                    break&#10;                wbf.write(content)&#10;                wbf.flush()&#10;            rbf.close()&#10;            wbf.close()&#10;&#10;&#10;def _get_root_path():&#10;    root_path = os.path.abspath(os.path.dirname(__file__)).replace('\\', '/')&#10;    print(root_path)&#10;    # if root_path.find('venv') &gt; 0:&#10;    #     root_path = root_path[:root_path.find('venv') - 1]&#10;    return root_path + '/'&#10;&#10;&#10;def _mkdir(path):&#10;    is_exists = os.path.exists(path)&#10;    if not is_exists:&#10;        os.makedirs(path)&#10;&#10;&#10;def _deldir(dir):&#10;    if os.path.exists(dir):&#10;        for file in os.listdir(dir):&#10;            file = os.path.join(dir, file)&#10;            if os.path.isdir(file):&#10;                print(&quot;remove dir&quot;, file)&#10;                os.chmod(file, stat.S_IWRITE | stat.S_IWOTH)&#10;                _deldir(file)&#10;            elif os.path.isfile(file):&#10;                print(&quot;remove file&quot;, file)&#10;                os.chmod(file, stat.S_IWRITE | stat.S_IWOTH)&#10;                os.remove(file)&#10;        shutil.rmtree(dir, True)&#10;&#10;&#10;def _copy_file(src_file, target_dir):&#10;    shutil.copy(src_file, target_dir)&#10;&#10;&#10;def _down_big_file(srcUrl, localFile):&#10;    print('%s\n ---&gt;&gt;&gt;\n  %s' % (srcUrl, localFile))&#10;    startTime = time.time()&#10;    with requests.get(srcUrl, stream=True) as r:&#10;        contentLength = int(r.headers['content-length'])&#10;        line = 'content-length: %dB/ %.2fKB/ %.2fMB'&#10;        line = line % (contentLength, contentLength / 1024, contentLength / 1024 / 1024)&#10;        print(line)&#10;        print('正在下载中..............')&#10;        downSize = 0&#10;        with open(localFile, 'wb') as f:&#10;            for chunk in r.iter_content(8192):&#10;                if chunk:&#10;                    f.write(chunk)&#10;                downSize += len(chunk)&#10;                line = '%d KB/s - %.2f MB， 共 %.2f MB'&#10;                line = line % (&#10;                    downSize / 1024 / (time.time() - startTime), downSize / 1024 / 1024, contentLength / 1024 / 1024)&#10;                print(line, end='\r')&#10;                if downSize &gt;= contentLength:&#10;                    break&#10;        timeCost = time.time() - startTime&#10;        line = '共耗时: %.2f s, 平均速度: %.2f KB/s'&#10;        line = line % (timeCost, downSize / 1024 / timeCost)&#10;        print(line)&#10;&#10;&#10;def _init(prj_name):&#10;    print('---------开始初始化-------------')&#10;    root_path = _get_root_path()&#10;    print('获取工程根目录：%s' % root_path)&#10;&#10;    prj_dir = root_path+'/.temp/' + prj_name&#10;    print('删除并重建临时文件夹: %s ' % prj_dir)&#10;    _deldir(prj_dir)&#10;    _mkdir(prj_dir)&#10;&#10;    cmd = 'git clone https://gitee.com/guoyasoft_wuling/' + prj_name + '.git ' + prj_dir&#10;    print(cmd)&#10;    print('框架下载中，请耐心等候......... ')&#10;    _invoke(cmd)&#10;&#10;    ## 读取ui初始化配置文件&#10;    y = _get_yaml(prj_dir + '/init_project.yaml')&#10;    ## 复制文件夹&#10;    dirs = y['dirs']&#10;    for dir in dirs:&#10;        _copy_dir(prj_dir + '/' + dir, root_path + dir)&#10;    ## 复制文件&#10;    files = y['files']&#10;    for file in files:&#10;        _copy_file(prj_dir + '/' + file, root_path)&#10;&#10;    _deldir(root_path+'/.temp/')&#10;&#10;def init_tools_prj():&#10;    _init('guoya-tools-test')&#10;&#10;&#10;def init_api_prj():&#10;    _init('guoya-api-test')&#10;&#10;&#10;def init_ui_prj():&#10;    # url = 'http://chromedriver.storage.googleapis.com/75.0.3770.90/chromedriver_win32.zip'&#10;    # _mkdir(root_path + 'chrome_driver')&#10;    # _down_big_file(url,root_path+'chrome_driver/chromedriver.exe')&#10;    _init('guoya-ui-test')&#10;&#10;&#10;def init_app_prj():&#10;    _init('guoya-app-test')&#10;&#10;def init_tools_demo():&#10;    _init('guoya-tools-demo')&#10;&#10;def init_api_demo():&#10;    _init('guoya-api-demo')&#10;&#10;def init_ui_demo():&#10;    _init('guoya-ui-demo')&#10;&#10;def init_app_demo():&#10;    _init('guoya-app-demo')&#10;&#10;&#10;if __name__=='__main__':&#10;    _init('guoya-ui-test')" description="搭建界面自动化框架" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="guoya_init_app" value="# -*- coding:utf-8 -*-&#10;# Author : 小吴老师&#10;# Data ：2019/7/18 20:27&#10;import os&#10;import shutil&#10;import stat&#10;import subprocess&#10;import yaml&#10;import time&#10;import requests&#10;&#10;&#10;def _get_yaml(yaml_path):&#10;    with open(yaml_path, 'r', encoding='utf-8') as f:&#10;        content = yaml.load(f.read(), Loader=yaml.FullLoader)&#10;    return content&#10;&#10;&#10;def _invoke(cmd):&#10;    try:&#10;        output, errors = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE).communicate()&#10;        o = output.decode(&quot;utf-8&quot;)&#10;        print(o)&#10;        return o&#10;    except Exception as e:&#10;        print('执行命令失败，请检查环境配置')&#10;        print(e)&#10;        raise&#10;&#10;&#10;def _copy_file(src_file, target_dir):&#10;    shutil.copy(src_file, target_dir)&#10;&#10;&#10;def _copy_dir_simple(src_dir, target_dir):&#10;    if not os.path.exists(target_dir):&#10;        shutil.copytree(src_dir, target_dir)&#10;&#10;&#10;&quot;&quot;&quot;&#10;利用递归实现目录的遍历&#10;@para sourcePath:原文件目录&#10;@para targetPath:目标文件目录&#10;&quot;&quot;&quot;&#10;def _copy_dir(sourcePath, targetPath):&#10;    if not os.path.exists(sourcePath):&#10;        return&#10;    if not os.path.exists(targetPath):&#10;        os.makedirs(targetPath)&#10;&#10;    # 遍历文件夹&#10;    for fileName in os.listdir(sourcePath):&#10;        # 拼接原文件或者文件夹的绝对路径&#10;        absourcePath = os.path.join(sourcePath, fileName)&#10;        # 拼接目标文件或者文件加的绝对路径&#10;        abstargetPath = os.path.join(targetPath, fileName)&#10;        # 判断原文件的绝对路径是目录还是文件&#10;        if os.path.isdir(absourcePath):&#10;            # 是目录就创建相应的目标目录&#10;            if not os.path.exists(absourcePath):&#10;                os.makedirs(abstargetPath)&#10;            # 递归调用getDirAndCopyFile()函数&#10;            _copy_dir(absourcePath, abstargetPath)&#10;        # 是文件就进行复制&#10;        if os.path.isfile(absourcePath) and not os.path.exists(abstargetPath):&#10;            rbf = open(absourcePath, &quot;rb&quot;)&#10;            wbf = open(abstargetPath, &quot;wb&quot;)&#10;            while True:&#10;                content = rbf.readline(1024 * 1024)&#10;                if len(content) == 0:&#10;                    break&#10;                wbf.write(content)&#10;                wbf.flush()&#10;            rbf.close()&#10;            wbf.close()&#10;&#10;&#10;def _get_root_path():&#10;    root_path = os.path.abspath(os.path.dirname(__file__)).replace('\\', '/')&#10;    print(root_path)&#10;    # if root_path.find('venv') &gt; 0:&#10;    #     root_path = root_path[:root_path.find('venv') - 1]&#10;    return root_path + '/'&#10;&#10;&#10;def _mkdir(path):&#10;    is_exists = os.path.exists(path)&#10;    if not is_exists:&#10;        os.makedirs(path)&#10;&#10;&#10;def _deldir(dir):&#10;    if os.path.exists(dir):&#10;        for file in os.listdir(dir):&#10;            file = os.path.join(dir, file)&#10;            if os.path.isdir(file):&#10;                print(&quot;remove dir&quot;, file)&#10;                os.chmod(file, stat.S_IWRITE | stat.S_IWOTH)&#10;                _deldir(file)&#10;            elif os.path.isfile(file):&#10;                print(&quot;remove file&quot;, file)&#10;                os.chmod(file, stat.S_IWRITE | stat.S_IWOTH)&#10;                os.remove(file)&#10;        shutil.rmtree(dir, True)&#10;&#10;&#10;def _copy_file(src_file, target_dir):&#10;    shutil.copy(src_file, target_dir)&#10;&#10;&#10;def _down_big_file(srcUrl, localFile):&#10;    print('%s\n ---&gt;&gt;&gt;\n  %s' % (srcUrl, localFile))&#10;    startTime = time.time()&#10;    with requests.get(srcUrl, stream=True) as r:&#10;        contentLength = int(r.headers['content-length'])&#10;        line = 'content-length: %dB/ %.2fKB/ %.2fMB'&#10;        line = line % (contentLength, contentLength / 1024, contentLength / 1024 / 1024)&#10;        print(line)&#10;        print('正在下载中..............')&#10;        downSize = 0&#10;        with open(localFile, 'wb') as f:&#10;            for chunk in r.iter_content(8192):&#10;                if chunk:&#10;                    f.write(chunk)&#10;                downSize += len(chunk)&#10;                line = '%d KB/s - %.2f MB， 共 %.2f MB'&#10;                line = line % (&#10;                    downSize / 1024 / (time.time() - startTime), downSize / 1024 / 1024, contentLength / 1024 / 1024)&#10;                print(line, end='\r')&#10;                if downSize &gt;= contentLength:&#10;                    break&#10;        timeCost = time.time() - startTime&#10;        line = '共耗时: %.2f s, 平均速度: %.2f KB/s'&#10;        line = line % (timeCost, downSize / 1024 / timeCost)&#10;        print(line)&#10;&#10;&#10;def _init(prj_name):&#10;    print('---------开始初始化-------------')&#10;    root_path = _get_root_path()&#10;    print('获取工程根目录：%s' % root_path)&#10;&#10;    prj_dir = root_path+'/.temp/' + prj_name&#10;    print('删除并重建临时文件夹: %s ' % prj_dir)&#10;    _deldir(prj_dir)&#10;    _mkdir(prj_dir)&#10;&#10;    cmd = 'git clone https://gitee.com/guoyasoft_wuling/' + prj_name + '.git ' + prj_dir&#10;    print(cmd)&#10;    print('框架下载中，请耐心等候......... ')&#10;    _invoke(cmd)&#10;&#10;    ## 读取ui初始化配置文件&#10;    y = _get_yaml(prj_dir + '/init_project.yaml')&#10;    ## 复制文件夹&#10;    dirs = y['dirs']&#10;    for dir in dirs:&#10;        _copy_dir(prj_dir + '/' + dir, root_path + dir)&#10;    ## 复制文件&#10;    files = y['files']&#10;    for file in files:&#10;        _copy_file(prj_dir + '/' + file, root_path)&#10;&#10;    _deldir(root_path+'/.temp/')&#10;&#10;def init_tools_prj():&#10;    _init('guoya-tools-test')&#10;&#10;&#10;def init_api_prj():&#10;    _init('guoya-api-test')&#10;&#10;&#10;def init_ui_prj():&#10;    # url = 'http://chromedriver.storage.googleapis.com/75.0.3770.90/chromedriver_win32.zip'&#10;    # _mkdir(root_path + 'chrome_driver')&#10;    # _down_big_file(url,root_path+'chrome_driver/chromedriver.exe')&#10;    _init('guoya-ui-test')&#10;&#10;&#10;def init_app_prj():&#10;    _init('guoya-app-test')&#10;&#10;def init_tools_demo():&#10;    _init('guoya-tools-demo')&#10;&#10;def init_api_demo():&#10;    _init('guoya-api-demo')&#10;&#10;def init_ui_demo():&#10;    _init('guoya-ui-demo')&#10;&#10;def init_app_demo():&#10;    _init('guoya-app-demo')&#10;&#10;&#10;if __name__=='__main__':&#10;    _init('guoya-app-test')" description="搭建手机自动化框架" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
</templateSet>